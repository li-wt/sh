import json
import re
from jsonpath_ng import parse
import requests
from jsonpath_ng import parse

# url = "https://www.youtube.com/watch?v=jBjtGolcknc"
proxy = {
            'http': "http://127.0.0.1:7890",
            'https': "https://127.0.0.1:7890"
        }

import requests
import json

url = "https://www.youtube.com/youtubei/v1/next?prettyPrint=false"

payload = json.dumps({
  "context": {
    "client": {
      "hl": "zh-CN",
      "clientName": "WEB",
      "clientVersion": "2.20240722.00.00-canary_control_2.20240723.00.00",
      "originalUrl": "https://www.youtube.com/watch?v=jBjtGolcknc",
      },
  },
  "continuation": "CDwSJRILakJqdEdvbGNrbmMyAMgBAOABAaICDSj___________8BQAAYACr7ETJzNkw2d3kxRFFxeURRb0Q4ajRBQ2c3Q1Bnc0lvUDYxdUpxZDRLcnJBUW9EOGo0QUNnM0NQZ29JcXRxazZmRFl5djh6Q2dQeVBnQUtEc0ktQ3dpbXVkWGl1TVRvcW9ZQkNnUHlQZ0FLRGNJLUNnamoxN0RoOE9QS2tXNEtBX0ktQUFvTndqNEtDT1NNc183VDc3R05Td29EOGo0QUNnM0NQZ29JaHUtTDJmcmpoWkljQ2dQeVBnQUtEY0ktQ2dqZjJxT3BxS3FHczJrS0FfSS1BQW9Od2o0S0NPeTcyOF9jOG9tZFpBb0Q4ajRBQ2czQ1Bnb0lsdGUyc2FYUzctWkNDZ1B5UGdBS0RzSS1Dd2pGN1pXVXlZVEY2YzBCQ2dQeVBnQUtEY0ktQ2dqRXdmdktsdmI0elFFS0FfSS1BQW9Od2o0S0NNM1NpZU9FOXN1dE9nb0Q4ajRBQ2c3Q1Bnc0l2c1NtLWJqOXdmalJBUW9EOGo0QUNnM0NQZ29JazVxWTU4SDMtcDAwQ2dQeVBnQUtEY0ktQ2dqRTY5ZW0zLUNkZzBzS0FfSS1BQW9Pd2o0TENMRGlnWXFCNG9HLTR3RUtBX0ktQUFvT3dqNExDUG1RazZPYjBMWF8td0VLQV9JLUFBb053ajRLQ01pVzNvZWp6NWZvVHdvRDhqNEFDZzdDUGdzSTVKbldoN0RBZ2ZuTkFRb0Q4ajRBQ2czQ1Bnb0kwYTdTMmYzLXRadzlDZ1B5UGdBS0RzSS1Dd2o2OXE3S3NOYTZuY1FCQ2dQeVBnQUtEc0ktQ3dpQXU5Ry16TXlvenAwQkNnUHlQZ0FLRHNJLUN3aks4ZC1JbmZqZXFxd0JDZ1B5UGdBS0RjSS1DZ2pkaXVqMWc0VGFyU0lLQV9JLUFBb053ajRLQ095WHlZYnB3czYwTndvRDhqNEFDZzNDUGdvSXJabWd3TGFqOExFdUNnUHlQZ0FLRHNJLUN3akprWnpxbEt2SW05b0JDZ1B5UGdBS0RzSS1Dd2oxOVpTSWpPckY1ZDRCQ2dQeVBnQUtEc0ktQ3dpQmhzam93TmFXcXVrQkNnUHlQZ0FLRHNJLUN3ajl4UHZlNmRMVGotZ0JDZ1B5UGdBS0RzSS1Dd2plaGR1aXhZVzI2Sk1CQ2dQeVBnQUtEc0ktQ3dpZ2lxVHV2UHpnNExjQkNnUHlQZ0FLRGNJLUNnalN6S3k5NnNxdmxEUUtBX0ktQUFvTndqNEtDSlRzLU5YZTh1cUNaUW9EOGo0QUNnN0NQZ3NJOEtQal91aU1pdmplQVFvRDhqNEFDZzNDUGdvSXVwRGo3SWV0bHA0YkNnUHlQZ0FLRHNJLUN3aUlsWW5oczhMQXZLWUJDZ1B5UGdBS0RzSS1Dd2pkb09IYWllNjV3ZUVCQ2dQeVBnQUtEY0ktQ2dpaHZ1U0ZrcUxJdWlJS0FfSS1BQW9Od2o0S0NPenA0TmpCaHFhMkZRb0Q4ajRBQ2czQ1Bnb0k1LWJyOFpIUG5wOTlDZ1B5UGdBS0RjSS1DZ2lxbHZqMHJJN1AzeDRLQV9JLUFBb053ajRLQ1ByUDhNUGt2TktuWkFvRDhqNEFDZzdDUGdzSWs2T1FzdTJkX3VuWkFRb0Q4ajRBQ2c3Q1Bnc0lnNUdjaVppYW1MR0pBUW9EOGo0QUNnN0NQZ3NJNEtIUjMtS3otUFNhQVFvRDhqNEFDZzdDUGdzSTh1TEdtOF81a3FQdkFRb0Q4ajRBQ2czQ1Bnb0k2UDZLOWZTM3BOTTNDZ1B5UGdBS0RzSS1Dd2lXaThDQnJ0Qzg3WllCQ2dQeVBnQUtEY0ktQ2dpZjJwYkpqX1hueFd3S0FfSS1BQW9Pd2o0TENNSGd4X25fLXVlS3pBRUtBX0ktQUFvTndqNEtDS3ZJMHNDMW1fS1JXUW9EOGo0QUNnN0NQZ3NJMW9ERGdKUHNtc0xOQVFvRDhqNEFDZzdDUGdzSXM0bVI5SU8xaTRHRkFRb0Q4ajRBQ2c3Q1Bnc0lyYXlrODhIX21mV3JBUW9EOGo0QUNnM0NQZ29JODYyR181Q18xX3dDQ2dQeVBnQUtEY0ktQ2dpMzZZdWhqS3VDNjN3S0FfSS1BQW9Pd2o0TENKLWU2dnpxeHFfbGd3RUtBX0ktQUFvTndqNEtDSWlmdFlDT19jaWRXd29EOGo0QUNnN0NQZ3NJM3VQbXJQTHdwdkQtQVJJOEFBSUVCZ2dLREE0UUVoUVdHQm9jSGlBaUpDWW9LaXd1TURJME5qZzZQRDVBUWtSR1NFcE1UbEJTVkZaWVdseGVZR0prWm1ocWJHNXdjblIyR2dRSUFCQUJHZ1FJQWhBREdnUUlCQkFGR2dRSUJoQUhHZ1FJQ0JBSkdnUUlDaEFMR2dRSURCQU5HZ1FJRGhBUEdnUUlFQkFSR2dRSUVoQVRHZ1FJRkJBVkdnUUlGaEFYR2dRSUdCQVpHZ1FJR2hBYkdnUUlIQkFkR2dRSUhoQWZHZ1FJSUJBaEdnUUlJaEFqR2dRSUpCQWxHZ1FJSmhBbkdnUUlLQkFwR2dRSUtoQXJHZ1FJTEJBdEdnUUlMaEF2R2dRSU1CQXhHZ1FJTWhBekdnUUlOQkExR2dRSU5oQTNHZ1FJT0JBNUdnUUlPaEE3R2dRSVBCQTlHZ1FJUGhBX0dnUUlRQkJCR2dRSVFoQkRHZ1FJUkJCRkdnUUlSaEJIR2dRSVNCQkpHZ1FJU2hCTEdnUUlUQkJOR2dRSVRoQlBHZ1FJVUJCUkdnUUlVaEJUR2dRSVZCQlZHZ1FJVmhCWEdnUUlXQkJaR2dRSVdoQmJHZ1FJWEJCZEdnUUlYaEJmR2dRSVlCQmhHZ1FJWWhCakdnUUlaQkJsR2dRSVpoQm5HZ1FJYUJCcEdnUUlhaEJyR2dRSWJCQnRHZ1FJYmhCdkdnUUljQkJ4R2dRSWNoQnpHZ1FJZEJCMUdnUUlkaEIzS2p3QUFnUUdDQW9NRGhBU0ZCWVlHaHdlSUNJa0ppZ3FMQzR3TWpRMk9EbzhQa0JDUkVaSVNreE9VRkpVVmxoYVhGNWdZbVJtYUdwc2JuQnlkSFlqD3dhdGNoLW5leHQtZmVlZA%3D%3D"
})
headers = {
  'authority': 'www.youtube.com',
  'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
  'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36',
}
response = requests.request("POST", url, headers=headers, data=payload, proxies=proxy)

# print(response.text)
jsonpath_expr = parse('$..url')
urls = {match.value for match in jsonpath_expr.find(response.json()) if
        isinstance(match.value, str) and match.value.startswith('/@')}
print(list(urls))
